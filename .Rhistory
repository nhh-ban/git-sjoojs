library(tidyverse)    # Contains most of what we need.
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "?")
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
raw_file
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, start = 1, stop = 2)
# The next step is then to find out *which* line starts with "--", and pick out
# the first one. This can be done in a nice little pipe, where you have to fill
# out the question marks and the missing function names:
L <-
(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which() %>%
min()
L
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function. The first argument is
# the information that we want to print out. In order to get each element in the
# "raw_file"-vector on a separate line we also provide the sep-argument, where
# we put the "end-of-line"-character "\n". We also need to come up with a file
# name. Replace the question marks:
cat(raw_file[1:(L-2)], sep = "\n", file = "Variable descriptions Problem 2")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector <- c[1:(L-1)]
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector <- [1:(L-1)]
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector <- L[1:(L-1)]
vector
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector <- raw_file[1:(L-1)]
vector
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector <- raw_file[1:10]
vector
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector_names <- raw_file[1:10]
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = vector_names, pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names
vector_names
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
vector_names <- raw_file[1:(L-1)]
vector_names
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = vector_names, pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names
variable_names
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_data[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names
comma_separated_values <-
variable_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values
comma_separated_values <-
vector_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values
comma_separated_values <-
raw_file[(L+1):length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
comma_separated_values_with_names
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "formatted_galaxies_data.csv")
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "formatted_galaxies.csv")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("formatted_galaxies.csv")
View(galaxies)
comma_separated_values <-
raw_file[(L+1)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "formatted_galaxies.csv")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("formatted_galaxies.csv")
comma_separated_values <-
raw_file[(L+1)length(raw_file)] %>%
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "formatted_galaxies.csv")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("formatted_galaxies.csv")
comma_separated_values <-
raw_file[(L+1):length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "formatted_galaxies.csv")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("formatted_galaxies.csv")
View(galaxies)
variable_names
vector_names
p <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_minimal() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)", x="Linear Diameter (kpc)", y="Density")
p
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_minimal() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)", x="Linear Diameter (kpc)", y="Density")
rm(p)
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density") %>% print()
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density")
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density") %>% view()
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density") %>% print()
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density")
a_26
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density")
a_26
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density")
a_26 <- ggplot(galaxies, aes(x=a_26)) +
geom_histogram(aes(y=..density..), fill="blue", alpha=0.5, bins=30) +
geom_density(color="red") +
theme_classic() +
labs(title="Distribution of Galaxy Linear Diameter (a_26)",
x="Linear Diameter (kpc)", y="Density")
a_26
both <- ggplot(galaxies_df) +
geom_density(aes(x=a_26, y=..density.., fill="Linear Diameter (a_26)"), alpha=0.5) +
geom_density(aes(x=log_m26, y=..density.., fill="Log Mass (log_m26)"), alpha=0.5) +
theme_minimal() +
labs(title="Distribution of Galaxy Linear Diameter and Log Mass", x="Value", y="Density") +
scale_fill_manual(values=c("blue", "red"))
both <- ggplot(galaxies) +
geom_density(aes(x=a_26, y=..density.., fill="Linear Diameter (a_26)"), alpha=0.5) +
geom_density(aes(x=log_m26, y=..density.., fill="Log Mass (log_m26)"), alpha=0.5) +
theme_minimal() +
labs(title="Distribution of Galaxy Linear Diameter and Log Mass", x="Value", y="Density") +
scale_fill_manual(values=c("blue", "red"))
both
# test
mean_a26 <- mean(galaxies_df$a_26, na.rm = TRUE)
# test
mean_a26 <- mean(galaxies$a_26, na.rm = TRUE)
sd_a26 <- sd(galaxies$a_26, na.rm = TRUE)
sd_log_m26 <- sd(galaxies$log_m26, na.rm = TRUE)
mean_log_m26 <- mean(galaxies$log_m26, na.rm = TRUE)
# Plotting the distributions of the linear diameter (a_26) and indicative mass (log_m26)
# with overlaid normal distribution curves
normal_dist <- ggplot(galaxies, aes(x=a_26)) +
geom_density(aes(y=..density..), fill="blue", alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_a26, sd=sd_a26), color="darkblue", linetype="dashed") +
geom_density(aes(x=log_m26, y=..density..), fill="red", alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_m26, sd=sd_log_m26), color="darkred", linetype="dashed") +
theme_minimal() +
labs(title="Density Plots with Normal Distribution Curves", x="Value", y="Density")
normal_dist
mean_a26
sd_a26
mean_log_m26
sd_log_m26
normal_dist
# Calculate mean and standard deviation for a_26, log_m26, m_b, and log_lk
mean_a26 <- mean(galaxies$a_26, na.rm = TRUE)
sd_a26 <- sd(galaxies$a_26, na.rm = TRUE)
mean_log_m26 <- mean(galaxies$log_m26, na.rm = TRUE)
sd_log_m26 <- sd(galaxies$log_m26, na.rm = TRUE)
mean_mb <- mean(galaxies$m_b, na.rm = TRUE)
sd_mb <- sd(galaxies$m_b, na.rm = TRUE)
mean_log_lk <- mean(galaxies$log_lk, na.rm = TRUE)
sd_log_lk <- sd(galaxies$log_lk, na.rm = TRUE)
# Plotting the distributions with overlaid normal distribution curves
normal_dist <- ggplot(galaxies) +
# a_26 distribution
geom_density(aes(x=a_26, y=..density.., fill="Linear Diameter (a_26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_a26, sd=sd_a26), color="darkblue", linetype="dashed") +
# log_m26 distribution
geom_density(aes(x=log_m26, y=..density.., fill="Log Mass (log_m26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_m26, sd=sd_log_m26), color="darkred", linetype="dashed") +
# m_b distribution
geom_density(aes(x=m_b, y=..density.., fill="Magnitude (m_b)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_mb, sd=sd_mb), color="darkgreen", linetype="dashed") +
# log_lk distribution
geom_density(aes(x=log_lk, y=..density.., fill="Log Stellar Mass (log_lk)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_lk, sd=sd_log_lk), color="darkorange", linetype="dashed") +
theme_minimal() +
labs(title="Density Plots with Normal Distribution Curves", x="Value", y="Density") +
scale_fill_manual(values=c("blue", "red", "green", "orange"))
normal_dist
# Plotting the distributions with overlaid normal distribution curves
normal_dist <- ggplot(galaxies) +
# a_26 distribution
geom_density(aes(x=a_26, y=..density.., fill="Linear Diameter (a_26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_a26, sd=sd_a26), color="darkblue", linetype="dashed") +
# log_m26 distribution
geom_density(aes(x=log_m26, y=..density.., fill="Log Mass (log_m26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_m26, sd=sd_log_m26), color="darkred", linetype="dashed") +
# m_b distribution
geom_density(aes(x=m_b, y=..density.., fill="Magnitude (m_b)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_mb, sd=sd_mb), color="darkgreen", linetype="dashed") +
# log_lk distribution
geom_density(aes(x=log_lk, y=..density.., fill="Log Stellar Mass (log_lk)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_lk, sd=sd_log_lk), color="darkorange", linetype="dashed") +
theme_minimal() +
labs(title="Density Plots with Normal Distribution Curves", x="Value", y="Density") +
scale_fill_manual(values=c("blue", "red", "green", "orange"))+
coord_cartesian(xlim=c(0, 25)) # setting desired range
normal_dist
# Plotting the distributions with overlaid normal distribution curves
normal_dist <- ggplot(galaxies) +
# a_26 distribution
geom_density(aes(x=a_26, y=..density.., fill="Linear Diameter (a_26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_a26, sd=sd_a26), color="darkblue", linetype="dashed") +
# log_m26 distribution
geom_density(aes(x=log_m26, y=..density.., fill="Log Mass (log_m26)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_m26, sd=sd_log_m26), color="darkred", linetype="dashed") +
# m_b distribution
geom_density(aes(x=m_b, y=..density.., fill="Magnitude (m_b)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_mb, sd=sd_mb), color="darkgreen", linetype="dashed") +
# log_lk distribution
geom_density(aes(x=log_lk, y=..density.., fill="Log Stellar Mass (log_lk)"), alpha=0.5) +
stat_function(fun=dnorm, args=list(mean=mean_log_lk, sd=sd_log_lk), color="darkorange", linetype="dashed") +
theme_minimal() +
labs(title="Density Plots with Normal Distribution Curves", x="Value", y="Density") +
scale_fill_manual(values=c("blue", "red", "green", "orange"))+
coord_cartesian(xlim=c(0, 20)) # setting desired range
normal_dist
